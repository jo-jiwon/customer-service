[{"C:\\customer-service\\pages\\api\\hello.ts":"1","C:\\customer-service\\pages\\index.tsx":"2","C:\\customer-service\\pages\\_app.tsx":"3","C:\\customer-service\\components\\appbar.tsx":"4","C:\\customer-service\\components\\layout.tsx":"5","C:\\customer-service\\pages\\review\\detail\\[id].tsx":"6"},{"size":307,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3802,"mtime":1635858757169,"results":"9","hashOfConfig":"8"},{"size":281,"mtime":1635757446382,"results":"10","hashOfConfig":"8"},{"size":1513,"mtime":1635858852751,"results":"11","hashOfConfig":"8"},{"size":585,"mtime":1635772755686,"results":"12","hashOfConfig":"8"},{"size":3727,"mtime":1635783718417,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k8uxoj",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\customer-service\\pages\\api\\hello.ts",[],"C:\\customer-service\\pages\\index.tsx",[],"C:\\customer-service\\pages\\_app.tsx",[],"C:\\customer-service\\components\\appbar.tsx",[],"C:\\customer-service\\components\\layout.tsx",[],"C:\\customer-service\\pages\\review\\detail\\[id].tsx",["27"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { AppDispatch, RootState } from \"../../../provider\";\r\nimport {\r\n  requestFetchPhotoItem,\r\n  requestRemovePhotoNext,\r\n  requestRemovePhotoPaging,\r\n} from \"../../../middleware/modules/photo\";\r\n// import { removePhoto } from \"./photoSlice\";\r\n\r\nimport Layout from \"../../../components/layout\";\r\nimport { PhotoItem } from \"../../../provider/modules/photo\";\r\n\r\nconst PhotoDetail = () => {\r\n  const router = useRouter();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  // /photos/detail/[id]\r\n  const id = router.query.id as string;\r\n  console.log(id);\r\n\r\n  let photoItem = useSelector((state: RootState) =>\r\n    state.photo.data.find((item) => item.id === +id)\r\n  );\r\n\r\n  if (id) {\r\n    // redux에 데이터가 없으면\r\n    if (!photoItem) {\r\n      // 1건에 데이터를 가져와 store에 추가함\r\n      dispatch(requestFetchPhotoItem(+id));\r\n    }\r\n  }\r\n\r\n  // 삭제 여부 감지 및 가져오기\r\n  const isRemoveCompleted = useSelector(\r\n    (state: RootState) => state.photo.isRemoveCompleted\r\n  );\r\n\r\n  useEffect(() => {\r\n    isRemoveCompleted && router.push(\"/photos\");\r\n  }, [isRemoveCompleted, router]);\r\n\r\n  const handDeleteClick = () => {\r\n    // saga action으로 대체\r\n    // dispatch(requestRemovePhoto(+id)); // 전체 조회일 때\r\n    // dispatch(requestRemovePhotoPaging(+id)); // 숫자 페이징일 때\r\n    dispatch(requestRemovePhotoNext(+id)); // 더보기 페이징일 때\r\n\r\n    // dispatch(removePhoto(+id)); // id값만 넣어서 삭제\r\n    // history.push(\"/photos\"); // 목록화면으로 이동\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <section style={{ width: \"40vw\" }} className=\"mx-auto\">\r\n        <h2 className=\"text-center\">Photo Detail</h2>\r\n        {!photoItem && (\r\n          <div className=\"text-center my-5\">데이터가 없습니다.</div>\r\n        )}\r\n        {photoItem && (\r\n          <table className=\"table\">\r\n            <tbody>\r\n              <tr>\r\n                <th>제목</th>\r\n                <td>{photoItem.title}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>설명</th>\r\n                <td>{photoItem.description}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>이미지</th>\r\n                <td>\r\n                  <img\r\n                    src={photoItem.photoUrl}\r\n                    alt={photoItem.title}\r\n                    width={\"100%\"}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n\r\n        <div className=\"d-flex\">\r\n          <div style={{ width: \"50%\" }}>\r\n            <button\r\n              className=\"btn btn-secondary me-1\"\r\n              onClick={() => {\r\n                router.push(\"/photos\");\r\n              }}\r\n            >\r\n              <i className=\"bi bi-grid-3x3-gap me-1\"></i>\r\n              목록\r\n            </button>\r\n          </div>\r\n          <div style={{ width: \"50%\" }} className=\"d-flex justify-content-end\">\r\n            <button\r\n              className=\"btn btn-primary me-1\"\r\n              onClick={() => {\r\n                router.push(`/photos/edit/${id}`);\r\n              }}\r\n            >\r\n              <i className=\"bi bi-pencil me-1\" />\r\n              수정\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => {\r\n                handDeleteClick();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-trash me-1\" />\r\n              삭제\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PhotoDetail;\r\n",{"ruleId":"28","severity":1,"message":"29","line":75,"column":19,"nodeType":"30","endLine":79,"endColumn":21},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element.","JSXOpeningElement"]